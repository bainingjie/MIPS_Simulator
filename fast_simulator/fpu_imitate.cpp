
union float_int
{
    int i;
    float f;
};

void bitprint(int line, int size) {
    int bit;
    for (int a=size-1; a >= 0; a--) {
        bit = (line >> a) & 1;
        // printf("%d", bit);
    }
    // printf("\n");
    return;
}

float myfmul (float a, float b){ //mostly checked through fdiv
    union float_int input1;
    union float_int input2;

    int sign1, sign2;
    int exp1, exp2;
    int mant1_hi, mant2_hi;
    int mant1_lo, mant2_lo;


    input1.f = a;
    input2.f = b;

    sign1 = (input1.i >> 31) & 1;
    sign2 = (input2.i >> 31) & 1;

    exp1 = (input1.i >> 23) & 0b11111111;
    exp2 = (input2.i >> 23) & 0b11111111;

    mant1_hi = ((input1.i >> 11) & 0b111111111111) | 0b1000000000000;
    mant2_hi = ((input2.i >> 11) & 0b111111111111) | 0b1000000000000;
    mant1_lo = input1.i & 0b11111111111;
    mant2_lo = input2.i & 0b11111111111;
    

    int hh = mant1_hi * mant2_hi;
    int hl = mant1_hi * mant2_lo;
    int lh = mant2_hi * mant1_lo;

    int exp_sum = exp1 + exp2;

    int exp_assumed = exp1 + exp2 - 127;

    int ans_sign = sign1 ^ sign2;
    int ans_exp;
    int ans_mant;

    int mant_assumed = hh + (hl >> 11) + (lh >> 11) + 2;
    int exp_assumed_carried = exp_assumed + 1;

    int underflow;
    if (exp_sum == 127) {
        underflow = 1;
    }
    else if (((exp_sum >> 8) & 1) == 1 || ((exp_sum >> 7) & 1) == 1) {
        underflow = 0;
    }
    else {
        underflow = 2;
    }

    if (exp1 == 0 || exp2 == 0) {
        ans_exp = 0;
        ans_mant = 0;
    }
    else if (underflow == 1 && ((mant_assumed>>25) & 1) == 1) {
        ans_exp = exp_assumed_carried & 0b11111111;
        ans_mant = (mant_assumed>>2) & 0b11111111111111111111111;
    }
    else if (underflow == 2 || underflow == 1) {
        ans_exp = 0;
        ans_mant = 0;
    }
    else if (((mant_assumed>>25) & 1) == 1) {
        ans_exp = exp_assumed_carried & 0b11111111;
        ans_mant = (mant_assumed >> 2) & 0b11111111111111111111111;
    }
    else {
        ans_exp = exp_assumed & 0b11111111;
        ans_mant = (mant_assumed >> 1) & 0b11111111111111111111111;
    }
    union float_int ans;

    ans.i = (ans_sign << 31) + (ans_exp << 23) + ans_mant;
    
    return ans.f;
}

int bramcons[1024] = {};

int bramgrad[1024] = {};

float myfinv(float a, int* keepflag) { //all checked
    union float_int input1;
    union float_int ans;
    input1.f = a;
    int sign1, exp1, mant_head1, mant_tail1;

    sign1 = (input1.i >> 31) & 1;

    exp1 = (input1.i >> 23) & 0b11111111;

    mant_head1 = (input1.i>>13) & 0b1111111111; //address
    mant_tail1 = input1.i & 0b1111111111111;

    int mant_tail2 = mant_tail1;
    int sign2 = sign1;
    int exp2 = exp1;

    int cons23;

    int cons24;
    int grad13;
    cons23 = bramcons[mant_head1];
    grad13 = bramgrad[mant_head1];
    cons24 = cons23 << 1;

    int a1_grad14 = (mant_tail2 * grad13) >> 12;

    int result_man = cons24 - a1_grad14;
    if (result_man >> 23 == 0) {
        result_man = 0;
    }
    int result_sign = sign2;
    int result_exp;
    if (exp2 == 0) {
        result_exp = 0;
    }
    else if (exp2 == 253) {
        result_exp = 1;
        *keepflag = 1;
    }
    else {
        result_exp = 253-exp2;
    }

    ans.i = (result_sign << 31) + (result_exp << 23) + (result_man & 0b11111111111111111111111);


    return ans.f;
    
}



float myfdiv(float a, float b) { // mostly checked
    union float_int ans;
    int keepflag = 0;
    float b_inv = myfinv(b, &keepflag);
    ans.f = myfmul(a, b_inv);
    if (keepflag == 1) {
        ans.i = (ans.i & (1<<31)) + ((ans.i & (255<<23))-(1<<23)) + (ans.i & ((1<<23)-1));
    }

    return ans.f;
}


int sqrt_cons[1024] = {};
int sqrt_grad[1024] = {5789,5784,5778,5772,5767,5761,5756,5750,5745,5739,5734,5728,5723,5717,5712,5706,5701,5696,5690,5685,5680,5674,5669,5664,5658,5653,5648,5643,5637,5632,5627,5622,5617,5611,5606,5601,5596,5591,5586,5581,5576,5571,5566,5561,5556,5551,5546,5541,5536,5531,5526,5521,5516,5511,5506,5502,5497,5492,5487,5482,5478,5473,5468,5463,5458,5454,5449,5444,5440,5435,5430,5426,5421,5416,5412,5407,5403,5398,5393,5389,5384,5380,5375,5371,5366,5362,5357,5353,5348,5344,5339,5335,5331,5326,5322,5317,5313,5309,5304,5300,5296,5291,5287,5283,5278,5274,5270,5266,5261,5257,5253,5249,5244,5240,5236,5232,5228,5224,5219,5215,5211,5207,5203,5199,5195,5191,5187,5183,5179,5175,5170,5166,5162,5158,5154,5150,5147,5143,5139,5135,5131,5127,5123,5119,5115,5111,5107,5103,5100,5096,5092,5088,5084,5080,5077,5073,5069,5065,5061,5058,5054,5050,5046,5043,5039,5035,5031,5028,5024,5020,5017,5013,5009,5006,5002,4998,4995,4991,4988,4984,4980,4977,4973,4970,4966,4962,4959,4955,4952,4948,4945,4941,4938,4934,4931,4927,4924,4920,4917,4913,4910,4906,4903,4900,4896,4893,4889,4886,4883,4879,4876,4872,4869,4866,4862,4859,4856,4852,4849,4846,4842,4839,4836,4833,4829,4826,4823,4819,4816,4813,4810,4806,4803,4800,4797,4794,4790,4787,4784,4781,4778,4774,4771,4768,4765,4762,4759,4756,4752,4749,4746,4743,4740,4737,4734,4731,4728,4725,4721,4718,4715,4712,4709,4706,4703,4700,4697,4694,4691,4688,4685,4682,4679,4676,4673,4670,4667,4664,4661,4658,4655,4653,4650,4647,4644,4641,4638,4635,4632,4629,4626,4623,4621,4618,4615,4612,4609,4606,4603,4601,4598,4595,4592,4589,4587,4584,4581,4578,4575,4573,4570,4567,4564,4561,4559,4556,4553,4550,4548,4545,4542,4540,4537,4534,4531,4529,4526,4523,4521,4518,4515,4513,4510,4507,4505,4502,4499,4497,4494,4491,4489,4486,4483,4481,4478,4476,4473,4470,4468,4465,4463,4460,4457,4455,4452,4450,4447,4445,4442,4439,4437,4434,4432,4429,4427,4424,4422,4419,4417,4414,4412,4409,4407,4404,4402,4399,4397,4394,4392,4389,4387,4384,4382,4380,4377,4375,4372,4370,4367,4365,4363,4360,4358,4355,4353,4350,4348,4346,4343,4341,4339,4336,4334,4331,4329,4327,4324,4322,4320,4317,4315,4313,4310,4308,4306,4303,4301,4299,4296,4294,4292,4289,4287,4285,4283,4280,4278,4276,4273,4271,4269,4267,4264,4262,4260,4258,4255,4253,4251,4249,4246,4244,4242,4240,4238,4235,4233,4231,4229,4227,4224,4222,4220,4218,4216,4213,4211,4209,4207,4205,4203,4200,4198,4196,4194,4192,4190,4188,4185,4183,4181,4179,4177,4175,4173,4171,4168,4166,4164,4162,4160,4158,4156,4154,4152,4150,4147,4145,4143,4141,4139,4137,4135,4133,4131,4129,4127,4125,4123,4121,4119,4117,4115,4113,4111,4109,4107,4105,4103,4101,4099,4098,8188,8180,8172,8164,8156,8148,8140,8132,8124,8117,8109,8101,8093,8086,8078,8070,8063,8055,8047,8040,8032,8025,8017,8010,8002,7995,7987,7980,7973,7965,7958,7951,7943,7936,7929,7921,7914,7907,7900,7893,7886,7878,7871,7864,7857,7850,7843,7836,7829,7822,7815,7808,7801,7794,7787,7781,7774,7767,7760,7753,7747,7740,7733,7726,7720,7713,7706,7700,7693,7686,7680,7673,7667,7660,7654,7647,7641,7634,7628,7621,7615,7608,7602,7595,7589,7583,7576,7570,7564,7558,7551,7545,7539,7532,7526,7520,7514,7508,7502,7495,7489,7483,7477,7471,7465,7459,7453,7447,7441,7435,7429,7423,7417,7411,7405,7399,7393,7388,7382,7376,7370,7364,7358,7353,7347,7341,7335,7330,7324,7318,7312,7307,7301,7295,7290,7284,7278,7273,7267,7262,7256,7251,7245,7240,7234,7228,7223,7218,7212,7207,7201,7196,7190,7185,7180,7174,7169,7163,7158,7153,7147,7142,7137,7132,7126,7121,7116,7110,7105,7100,7095,7090,7084,7079,7074,7069,7064,7059,7054,7049,7043,7038,7033,7028,7023,7018,7013,7008,7003,6998,6993,6988,6983,6978,6973,6968,6963,6959,6954,6949,6944,6939,6934,6929,6924,6920,6915,6910,6905,6900,6896,6891,6886,6881,6877,6872,6867,6862,6858,6853,6848,6844,6839,6834,6830,6825,6821,6816,6811,6807,6802,6798,6793,6788,6784,6779,6775,6770,6766,6761,6757,6752,6748,6743,6739,6734,6730,6726,6721,6717,6712,6708,6704,6699,6695,6690,6686,6682,6677,6673,6669,6664,6660,6656,6652,6647,6643,6639,6634,6630,6626,6622,6618,6613,6609,6605,6601,6597,6592,6588,6584,6580,6576,6572,6567,6563,6559,6555,6551,6547,6543,6539,6535,6531,6527,6523,6519,6515,6511,6506,6502,6498,6495,6491,6487,6483,6479,6475,6471,6467,6463,6459,6455,6451,6447,6443,6439,6436,6432,6428,6424,6420,6416,6412,6409,6405,6401,6397,6393,6389,6386,6382,6378,6374,6371,6367,6363,6359,6356,6352,6348,6344,6341,6337,6333,6330,6326,6322,6319,6315,6311,6308,6304,6300,6297,6293,6289,6286,6282,6279,6275,6271,6268,6264,6261,6257,6253,6250,6246,6243,6239,6236,6232,6229,6225,6222,6218,6215,6211,6208,6204,6201,6197,6194,6190,6187,6183,6180,6177,6173,6170,6166,6163,6160,6156,6153,6149,6146,6143,6139,6136,6132,6129,6126,6122,6119,6116,6112,6109,6106,6102,6099,6096,6093,6089,6086,6083,6079,6076,6073,6070,6066,6063,6060,6057,6053,6050,6047,6044,6041,6037,6034,6031,6028,6025,6021,6018,6015,6012,6009,6006,6002,5999,5996,5993,5990,5987,5984,5981,5977,5974,5971,5968,5965,5962,5959,5956,5953,5950,5947,5944,5940,5937,5934,5931,5928,5925,5922,5919,5916,5913,5910,5907,5904,5901,5898,5895,5892,5889,5886,5883,5880,5877,5874,5872,5869,5866,5863,5860,5857,5854,5851,5848,5845,5842,5839,5836,5834,5831,5828,5825,5822,5819,5816,5813,5811,5808,5805,5802,5799,5796,5795};

float myfsqrt(float a) { //all checked
    union float_int input1;
    union float_int ans;
    input1.f = a;
    int sign1, exp1, mant_head1, mant_tail1;

    sign1 = input1.i >> 31;

    exp1 = (input1.i >> 23) & 0b11111111;

    mant_head1 = (input1.i>>14) & 0b111111111; //address
    mant_tail1 = input1.i & 0b11111111111111;

    int mant_tail2 = mant_tail1;
    int sign2 = sign1;
    int exp2 = exp1;

    int cons23;

    int cons24;
    int grad13;

    int addr = ((exp1 & 1)<<9) + mant_head1;
    cons23 = sqrt_cons[addr];
    grad13 = sqrt_grad[addr];
    cons24 = cons23 << 1;

    int a1_grad14_even = (mant_tail2 * grad13) >> 13;
    int a1_grad14_odd = (mant_tail2 * grad13) >> 14;
    int a1_grad14;

    if ((exp2 & 1) == 0) {
        a1_grad14 = a1_grad14_even;
    }
    else {
        a1_grad14 = a1_grad14_odd;
    }

    int result_man = cons24 + a1_grad14;
    int result_sign = sign2;
    int result_exp;
    if (exp2 == 0) {
        result_exp = 0;
    }
    else {
        result_exp = (exp2 + 127) >> 1;
    }

    ans.i = (result_sign << 31) + (result_exp << 23) + (result_man & 0b11111111111111111111111);

    return ans.f;
}

float myfloor(float a) { //all checked

    union float_int input1;
    union float_int ans;
    input1.f = a;
    int sign, exp, mant;
    int carried_exp;

    sign = input1.i >> 31;
    exp = (input1.i >> 23) & 0b11111111;
    mant = input1.i & ((1<<23)-1);

    int shift_len;
    int overfp_mask;
    int underfp_mask;
    int carry;

    shift_len = 150 - exp;
    overfp_mask = 0x7fffff << shift_len;
    underfp_mask = 0x7fffff >> (23-shift_len);

    int mant_overfp;
    int mant_underfp;
    int underrounded_mant;

    mant_overfp = mant & overfp_mask;
    mant_underfp = mant & underfp_mask;
    carry = 1 << shift_len;
    underrounded_mant = (mant & overfp_mask) + carry;
    

    carried_exp = exp + 1;

    if (exp <= 126) {
        if (sign == 0 || exp == 0) {
            ans.i = sign<<31;
        }
        else {
            ans.i = (sign<<31) + (127<<23);
        }
    }
    else if (exp < 150){
        if (sign == 0 || mant_underfp == 0) {
            ans.i = (sign<<31) + (exp<<23) + mant_overfp;
        }
        else if (mant_overfp == overfp_mask) {
            ans.i = (sign<<31) + (carried_exp<<23);
        }
        else {
            ans.i = (sign<<31) + (exp<<23) + underrounded_mant;
        }
    }
    else {
        ans.i = input1.i;
    }
    return ans.f;
}

int myftoi(float a) { //all checked
    union float_int input1;
    union float_int ans;
    input1.f = a;
    int sign, exp, mant;
    int mant24;
    int roundbit;
    int p_ans_assumed_s;
    int p_ans_assumed_l;
    int n_ans_assumed_s;
    int n_ans_assumed_l;

    sign = input1.i >> 31;
    exp = (input1.i >> 23) & 0b11111111;
    mant = input1.i & ((1<<23)-1);
    mant24 = mant + (1<<23);

    roundbit = (mant>>(149-exp)) & 1;
    p_ans_assumed_s = (mant24>>(150-exp)) + roundbit;
    p_ans_assumed_l = mant24 << (exp-150);
    n_ans_assumed_s = 0x100000000 - p_ans_assumed_s;
    n_ans_assumed_l = 0x100000000 - p_ans_assumed_l;

    if (exp < 126) {
        ans.i = 0;
    }
    else if (exp == 126) {
        if (sign == 0) {
            ans.i = 1;
        }
        else {
            ans.i = 0xffffffff;
        }
    }
    else if (exp < 150) {
        if (sign == 0) {
            ans.i = p_ans_assumed_s;
        }
        else {
            ans.i = n_ans_assumed_s;
        }
    }
    else if (exp < 158) {
        if (sign == 0) {
            ans.i = p_ans_assumed_l;
        }
        else {
            ans.i = n_ans_assumed_l;
        }
    }
    else {
        ans.i = 0;
    }

    return ans.i;
}

float myitof (int a) { //all checked.
    int inputabs;
    int roundbit;
    int all1flag;
    int expcarry;

    int anssign;
    int ansexp;
    int ansmant;

    if (((unsigned int)a>>31) == 1) {
        anssign = 1;
        inputabs = -a;
    }
    else {
        anssign = 0;
        inputabs = a;
    }
    
    for (int i=6; i >= 0; i--) {
        if (((inputabs>>(24+i))&1) == 1) {
            roundbit = (inputabs>>i)&1;
            all1flag = ((inputabs>>(i+1))&((1<<23)-1)) == ((1<<23)-1);
            break;
        }
        if (i == 0) {
            roundbit = 0;
            all1flag = 0;
        }
    }

    expcarry = all1flag & roundbit;

    for (int i=30; i >= 0; i--) {
        if (i >= 24) {
            if (((inputabs>>i)&1) == 1) {
                ansexp = 157 - (30-i) + expcarry;
                ansmant = (((inputabs>>(i-23))&((1<<23)-1)) + roundbit) & ((1<<23)-1);
                break;
            }
        }
        else {
            if (((inputabs>>i)&1) == 1) {
                ansexp = 157 - (30-i);
                ansmant = (inputabs<<(23-i)) & ((1<<23)-1);
                break;
            }
            if (i == 0) {
                if (anssign == 1) {
                    ansexp = 158;
                    ansmant = 0;
                }
                else {
                    ansexp = 0;
                    ansmant = 0;
                }
            }
        }
    }

    union float_int ans;
    ans.i = (anssign<<31) + (ansexp<<23) + ansmant;
    return ans.f;
}

int myfeq(float a, float b) {
    union float_int in1;
    union float_int in2;

    in1.f = a;
    in2.f = b;

    int ans;
    if ((((in1.i>>23)&0b11111111) == 0) && (((in2.i>>23)&0b11111111) == 0)) {
        ans = 1;
    }
    else {
        ans = in1.i == in2.i;
    }
    return ans;
}



int myfless(float a, float b) {
    union float_int in1;
    union float_int in2;

    in1.f = a;
    in2.f = b;

    int ans;

    if ((((in1.i>>23)&0b11111111) == 0) && (((in2.i>>23)&0b11111111) == 0)) {
        ans = 0;
    }
    else if ((((in1.i>>31)&1) == 1) && (((in2.i>>31)&1) == 1)){
        ans = in1.i > in2.i;
    }
    else {
        ans = in1.i < in2.i;
    }
    return ans;
}


float myfadd(float a, float b) { //mostly checked
    union float_int input1;
    union float_int input2;
    union float_int ans;

    int sign1, sign2;
    int exp1, exp2;
    int mant1, mant1_24;
    int mant2, mant2_24;

    int addflag;

    int exp_dif;

    int exp_larger;

    int larger_m;
    int smaller_m;
    int mant_ans_raw;

    int ans_sign;
    int ans_exp;
    int ans_mant25;

    int guardbit; // valuable in fsub case

    input1.f = a;
    input2.f = b;

    if (((input1.i>>23)&0b11111111) == 0) {
        sign1 = 0;
        exp1 = 0;
        mant1 = 0;
        mant1_24 = 0;
    }
    else {
        sign1 = (input1.i >> 31) & 1;
        exp1 = (input1.i >> 23) & 0b11111111;
        mant1 = input1.i & ((1<<23)-1);
        mant1_24 = mant1 | (1<<23);
    }
    if (((input2.i>>23)&0b11111111) == 0) {
        sign2 = 0;
        exp2 = 0;
        mant2 = 0;
        mant2_24 = 0;
    }
    else {
        sign2 = (input2.i >> 31) & 1;
        exp2 = (input2.i >> 23) & 0b11111111;
        mant2 = input2.i & ((1<<23)-1);
        mant2_24 = mant2 | (1<<23);
    }

    addflag = sign1 == sign2;

    int smaller_m_withgb; // guard bit is jointed to smaller_mantissa at tail. so 25 bit num.
    int larger_m_with0; //0bit is jointed to larger_m at tail. so 25 bit num.

    if ((input1.i & 0x7fffffff) > (input2.i & 0x7fffffff)) {
        ans_sign = sign1;
        exp_larger = exp1;
        exp_dif = exp1-exp2;
        larger_m = mant1_24;
        if (exp_dif > 24) {
            smaller_m = 0;
            guardbit = 0;
        }
        else if (exp_dif == 0) {
            guardbit = 0;
            smaller_m = mant2_24 >> exp_dif;
        }
        else {
            guardbit = (mant2_24 >> (exp_dif-1)) & 1;
            smaller_m = mant2_24 >> exp_dif;
        }
    }
    else {
        ans_sign = sign2;
        exp_larger = exp2;
        exp_dif = exp2-exp1;
        larger_m = mant2_24;
        if (exp_dif > 24) {
            smaller_m = 0;
            guardbit = 0;
        }
        else if (exp_dif == 0) {
            guardbit = 0;
            smaller_m = mant1_24 >> exp_dif;
        }
        else {
            guardbit = (mant1_24 >> (exp_dif-1)) & 1;
            smaller_m = mant1_24 >> exp_dif;
        }
    }
    larger_m_with0 = larger_m<<1; /////
    smaller_m_withgb = (smaller_m<<1) + guardbit;
    

    int mant_ans_raw_withgb; //for minus case, subtract larger_m_with0 by smaller_m_withgb; 
    
    
    if (addflag == 1) {
        mant_ans_raw = larger_m + smaller_m;

    }
    else {
        mant_ans_raw_withgb = larger_m_with0 - smaller_m_withgb;
        mant_ans_raw = mant_ans_raw_withgb>>1;
    }

    for (int i=24; i >=0; i--) {
        if (i==24){
            if (((mant_ans_raw>>24)&1) == 1) {
                ans_exp = exp_larger+1;
                ans_mant25 = mant_ans_raw>>1;
                break;
            }
        }
        else {
            if (((mant_ans_raw>>i)&1) == 1) {
                ans_exp = exp_larger - (23-i);
                if (addflag == 0) { //sub case
                    if (i==23) {
                        ans_mant25 = ((mant_ans_raw_withgb<<(23-i))>>1) & ((1<<25)-1); //mant_ans_raw_withgb contains guardbit and guardbit should be discarded naturally, so 1 shift is needed.
                    }
                    else if (i==22) {
                        ans_mant25 = ((mant_ans_raw_withgb<<(23-i))>>1) & ((1<<25)-1);
                    }
                    else {
                        ans_mant25 = (((mant_ans_raw_withgb<<(23-i))>>1) & ((1<<25)-1));
                    }
                }
                else {
                    ans_mant25 = (mant_ans_raw<<(23-i)) & ((1<<25)-1);
                }
                break;
            }
        }

        if (i==0) {
            ans_exp = 0;
            ans_mant25 = 0;
        }
    }
    ans.i = (ans_sign<<31) + (ans_exp<<23) + (ans_mant25 & ((1<<23)-1));
    return ans.f;

} 

float myfsub(float a, float b) { //mostly checked
    float ans;
    ans = myfadd(a,-b);
    return ans;
}


//int main() {
    //union float_int y;
    //union float_int ideal;
    //union float_int a;
    //union float_int b;
    //b.f = 1.0;
    //union float_int e;
    //e.i = 1<<23;
    //union float_int twom23;
    //twom23.i = 104<<23;
    //srand(1001);
    //for (int _=0; _ <30; _++) {
        //b.i = random();
        //printf("b    :");
        //bitprint(b.i,32);
        //for (int i=0; i < 0xffffffff; i++) 
            //if (((i >> 23) & 0b11111111) == 0b11111111) {
                //continue;
            //}
            //a.i = i;
            //y.f = myfadd(a.f,b.f);
            //if (((i >> 23) & 0b11111111) == 0) {
                //a.i = 0;
            //}
            //if (((b.i >> 23) & 0b11111111) == 0) {
                //b.f = 0;
            //}
            //ideal.f = a.f + b.f;
            //if (((ideal.i >> 23) & 0b11111111) == 0b11111111) {
                //continue;
            //}
            //if (fabsf(y.f-ideal.f) >= fabsf(a.f)*twom23.f && fabsf(y.f-ideal.f) >= fabsf(b.f)*twom23.f && fabsf(y.f-ideal.f) >= fabsf(ideal.f)*twom23.f && fabsf(y.f-ideal.f) >= e.f) {
                //printf("i    :");
                //bitprint(i,32);
                //printf("ideal:");
                //bitprint(ideal.i,32);
                //printf("y    :");
                //bitprint(y.i,32);
                //exit(1);
            //}
        //}
    //}    
    //return 0;
//}